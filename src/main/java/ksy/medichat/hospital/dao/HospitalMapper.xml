<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        
<mapper namespace="ksy.medichat.hospital.dao.HospitalMapper">
	<!-- insertHospital -->
	<insert id="insertHospital" parameterType="hospitalVO">
		INSERT INTO hospital VALUES (
									  #{hos_num},
									  #{hos_addr},
									  #{hos_div},
									  #{hos_divName},
									  #{hos_emcls},
									  #{hos_emclsName},
									  #{hos_eryn},
									  #{hos_etc},
									  #{hos_mapImg},
									  #{hos_name},
									  #{hos_tell1},
									  #{hos_tell3},
									  #{hos_time1C},
									  #{hos_time2C},
									  #{hos_time3C},
									  #{hos_time4C},
									  #{hos_time5C},
									  #{hos_time6C},
									  #{hos_time7C},
									  #{hos_time8C},
									  #{hos_time1S},
									  #{hos_time2S},
									  #{hos_time3S},
									  #{hos_time4S},
									  #{hos_time5S},
									  #{hos_time6S},
									  #{hos_time7S},
									  #{hos_time8S},
									  #{hos_hpId},
									  #{hos_postCdn1},
									  #{hos_postCdn2},
									  #{hos_info},
									  #{hos_lon},
									  #{hos_lat},
									  #{hos_x},
									  #{hos_y},
									  #{hos_weekendAt}
									  )
	</insert>

<!-- ========================= 병원 리스트 시작 ========================= -->
	<sql id="searchHospitalByKeyword">
		<if test="keyword!=null and keyword!=''">
			AND (hos_addr LIKE '%' || #{keyword} || '%'
			     OR hos_name LIKE '%' || #{keyword} || '%'
				 OR hos_info LIKE '%' || #{keyword} || '%'
				 <if test="sub_sql!=null and sub_sql!=''">
				 	${sub_sql}
				 </if>
				 )
		</if>
		
	</sql>
	<sql id="searchHospitalByCommonFilter">
		<if test="commonFilter!=null || commonFilter==''">
			<if test="commonFilter.contains('NONFACE')">
				AND doc_cnt > 0
			</if>
			<if test="commonFilter.contains('ING')">
				<if test="day==1">
					AND hos_time1c != 'null'
					AND hos_time1c >= #{time}
				</if>
				<if test="day==2">
					AND hos_time2c != 'null'
					AND hos_time2c >= #{time}
				</if>
				<if test="day==3">
					AND hos_time3c != 'null'
					AND hos_time3c >= #{time}
				</if>
				<if test="day==4">
					AND hos_time4c != 'null'
					AND hos_time4c >= #{time}
				</if>
				<if test="day==5">
					AND hos_time5c != 'null'
					AND hos_time5c >= #{time}
				</if>
				<if test="day==6">
					AND hos_time6c != 'null'
					AND hos_time6c >= #{time}
				</if>
				<if test="day==7">
					AND hos_time7c != 'null'
					AND hos_time7c >= #{time}
				</if>
			</if>
			<if test="commonFilter.contains('NIGHTTIME')">
				<if test="day==1">
					AND hos_time1c != 'null'
					AND hos_time1c > '1800'
				</if>
				<if test="day==2">
					AND hos_time2c != 'null'
					AND hos_time2c > '1800'
				</if>
				<if test="day==3">
					AND hos_time3c != 'null'
					AND hos_time3c > '1800'
				</if>
				<if test="day==4">
					AND hos_time4c != 'null'
					AND hos_time4c > '1800'
				</if>
				<if test="day==5">
					AND hos_time5c != 'null'
					AND hos_time5c > '1800'
				</if>
				<if test="day==6">
					AND hos_time6c != 'null'
					AND hos_time6c > '1300'
				</if>
				<if test="day==7">
					AND hos_time7c != 'null'
					AND hos_time7c > '1300'
				</if>
			</if>
			<if test="commonFilter.contains('WEEKEND')">
				AND hos_weekendat = 'Y'
			</if>
		</if>
	</sql>
	<sql id="searchHospitalBySortType">

		<if test="sortType=='REVIEW'">
			,rev_cnt DESC
		</if>
		<if test="sortType=='SCORE'">
			,hos_score DESC
		</if>
		<if test="sortType=='HIT'">
			,hos_hit DESC
		</if>
	</sql>
	
	<!-- selectListHospital -->
	<select id="selectListHospital" parameterType="map" resultType="hospitalVO">
		SELECT *
		FROM ( SELECT a.* , ROWNUM rnum
		       FROM ( SELECT t.*
		              FROM ( SELECT h.*, 
		              				rev_avg,
		                            ROUND((6378137 * ACOS(COS(RADIANS(#{user_lat})) * COS(RADIANS(h.hos_lat)) * COS(RADIANS(h.hos_lon) - RADIANS(#{user_lon})) + SIN(RADIANS(#{user_lat})) * SIN(RADIANS(h.hos_lat))))) AS around,
		                            COALESCE(d.doc_cnt, 0) AS doc_cnt,
		                            COALESCE(r.rev_cnt, 0) AS rev_cnt
		                     FROM hospital h LEFT JOIN ( SELECT hos_num, COUNT(*) AS doc_cnt
		                                                 FROM doctor_detail
		                                                 WHERE doc_treat = 1
		                                                 GROUP BY hos_num
		                                               ) d 
		                                     ON h.hos_num = d.hos_num
		                                     LEFT JOIN ( SELECT hos_num, COUNT(*) AS rev_cnt
		                                                 FROM review
		                                                 GROUP BY hos_num
		                                               ) r 
		                                     ON h.hos_num = r.hos_num
		                                     LEFT JOIN( SELECT AVG(rev_grade) rev_avg, hos_num 
		                                     			FROM review
		                                    			GROUP BY hos_num
											 ) re ON h.hos_num =re.hos_num 
		                     where hos_lat between #{user_lat}-0.04 and #{user_lat}+0.04 and hos_lon between #{user_lon}-0.04 and #{user_lon}+0.04
		                     <include refid="searchHospitalByKeyword"/>
							 <include refid="searchHospitalByCommonFilter"/>
		                   ) t
		              ORDER BY around
		              <include refid="searchHospitalBySortType"/>
		            ) a
		       <![CDATA[     
		       WHERE ROWNUM <= #{pageNum} * #{pageItemNum}
		       ]]>
		     )
		WHERE rnum > (#{pageNum} - 1) * #{pageItemNum}
	</select>
<!-- ========================= 병원 리스트 끝 ========================= -->

	<select id="selectHospital" parameterType="long" resultType="hospitalVO">
		select h.*, d.doc_cnt, rev_avg from hospital h LEFT JOIN ( SELECT hos_num, COUNT(*) AS doc_cnt
		                                                 FROM doctor_detail
		                                                 WHERE doc_treat = 1
		                                                 GROUP BY hos_num
		                                               ) d  ON h.hos_num = d.hos_num 
		                                                LEFT JOIN( SELECT AVG(rev_grade) rev_avg, hos_num 
		                                     			FROM review
		                                    			GROUP BY hos_num
											 			) re ON h.hos_num =re.hos_num 
		                                               
		                                               where h.hos_num=#{hos_num}
	</select>
	
	<update id="updateHitHospital" parameterType="long">
		UPDATE hospital SET hos_hit = hos_hit + 1 WHERE hos_num=#{hos_num}
	</update>
	
	<update id="initHitHospital">
		UPDATE hospital SET hos_hit = 0 where hos_hit > 0
	</update>
</mapper>